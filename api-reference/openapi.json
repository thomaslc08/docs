/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/auth/signup": {
    /** Register to Inscriptor */
    post: operations["AuthController_signup"];
  };
  "/v1/auth/signin": {
    post: operations["AuthController_signin"];
  };
  "/v1/auth/validate-google-token/{token}": {
    get: operations["AuthController_validateToken"];
  };
  "/v1/auth/google/callback": {
    get: operations["AuthController_googleAuthCallback"];
  };
  "/v1/users": {
    /**
     * Get ALL users
     * @description Only SUPERADMIN can access this endpoint
     */
    get: operations["UserController_findAll"];
  };
  "/v1/users/{id}": {
    /**
     * Get user by ID
     * @description SUPERADMIN can access every user, user can only see itself
     */
    get: operations["UserController_findOne"];
    /**
     * Delete user by ID
     * @description SUPERADMIN only can delete a user
     */
    delete: operations["UserController_remove"];
    /**
     * Update user by ID
     * @description SUPERADMIN can update every user, user can only update itself
     */
    patch: operations["UserController_update"];
  };
  "/v1/tenants": {
    /**
     * Get tenants for active user
     * @description SUPERADMIN can see every tenant, current user will only see those which he's connected to
     */
    get: operations["TenantController_findAll"];
    /**
     * Create a new tenant
     * @description Only ADMINs can create a new tenant
     */
    post: operations["TenantController_create"];
  };
  "/v1/tenants/{tenantSlug}": {
    /**
     * Get a tenant
     * @description Users can only see the tenants they're connected to
     */
    get: operations["TenantController_findOne"];
  };
  "/v1/tenants/{slug}": {
    /**
     * Update a tenant
     * @description Only ADMINs can update a tenant
     */
    patch: operations["TenantController_update"];
  };
  "/v1/tenants/{tenantSlug}/accounts": {
    /** Get all accounts related to tenant */
    get: operations["UserTenantController_getUsers"];
    /** Add a user to tenant */
    post: operations["UserTenantController_create"];
  };
  "/v1/tenants/{tenantSlug}/accounts/user/{userId}": {
    /** Get account related to tenant */
    get: operations["UserTenantController_getAccountForUser"];
  };
  "/v1/tenants/{tenantSlug}/accounts/{id}": {
    /** Get account related to tenant */
    get: operations["UserTenantController_findOne"];
    /** Delete account from tenant */
    delete: operations["UserTenantController_removeAccountFromTenant"];
  };
  "/v1/tenants/{tenantSlug}/accounts/{userId}": {
    /** Update account from tenant */
    patch: operations["UserTenantController_updateAccount"];
  };
  "/v1/tenants/{tenantSlug}/events": {
    /** Get all events */
    get: operations["EventController_findAll"];
    /** Create a new event */
    post: operations["EventController_createEvent"];
  };
  "/v1/tenants/{tenantSlug}/events/{id}": {
    /** Get one event */
    get: operations["EventController_findOne"];
    /** Update an event */
    patch: operations["EventController_update"];
  };
  "/v1/tenants/{tenantSlug}/members": {
    /** Get all members */
    get: operations["MemberController_getMembersForTenant"];
    /** Create a new member */
    post: operations["MemberController_createMember"];
  };
  "/v1/tenants/{tenantSlug}/members/id/{id}": {
    /** Get a member by ID */
    get: operations["MemberController_getOneMember"];
  };
  "/v1/tenants/{tenantSlug}/members/{id}": {
    /**
     * Delete a member
     * @description Only members with no donations nor registrations can be deleted.
     */
    delete: operations["MemberController_remove"];
    /** Update  a member */
    patch: operations["MemberController_update"];
  };
  "/v1/tenants/{tenantSlug}/members/lastcreated": {
    /** Get 5 last created members */
    get: operations["MemberController_getLastCreatedMembers"];
  };
  "/v1/tenants/{tenantSlug}/donations": {
    /** Get all donations */
    get: operations["DonationController_findAll"];
    /** Create a donation */
    post: operations["DonationController_create"];
  };
  "/v1/tenants/{tenantSlug}/donations/receipt": {
    /** Generate fiscal receipts for donations */
    post: operations["DonationController_generateReceipt"];
  };
  "/v1/tenants/{tenantSlug}/donations/{memberId}": {
    /** Get all donations for a single member */
    get: operations["DonationController_findOne"];
  };
  "/v1/tenants/{tenantSlug}/helloasso/{eventId}/processedOrders/count": {
    /** Get orders count */
    get: operations["HelloassoController_getProcessedOrdersCount"];
  };
  "/v1/tenants/{tenantSlug}/helloasso/notification/{helloAssoClientId}": {
    /** HelloAsso notification URL */
    post: operations["HelloassoController_newOrder"];
  };
  "/v1/tenants/{tenantSlug}/helloasso/notificationUrl": {
    /** Get HelloAsso notification URL */
    get: operations["HelloassoController_getNotificationUrl"];
  };
  "/v1/tenants/{tenantSlug}/helloasso/orders": {
    /** Create multiple orders */
    post: operations["HelloassoController_createMultipleOrders"];
  };
  "/v1/tenants/{tenantSlug}/{eventId}/eventprices": {
    get: operations["EventpriceController_getEventPricesForEvent"];
    post: operations["EventpriceController_createEventPrice"];
  };
  "/v1/tenants/{tenantSlug}/{eventId}/eventprices/{id}": {
    get: operations["EventpriceController_findOne"];
    delete: operations["EventpriceController_remove"];
    patch: operations["EventpriceController_update"];
  };
  "/v1/tenants/{tenantSlug}/{eventId}/eventprices/{eventPriceId}/slots": {
    get: operations["EventpriceController_getFreeSlotsEventPrice"];
  };
  "/v1/tenants/{tenantSlug}/orders": {
    get: operations["OrderController_getAllOrders"];
    post: operations["OrderController_createOrder"];
  };
  "/v1/tenants/{tenantSlug}/orders/id/{id}": {
    get: operations["OrderController_findOne"];
    delete: operations["OrderController_remove"];
    patch: operations["OrderController_update"];
  };
  "/v1/tenants/{tenantSlug}/orders/id/{id}/pdf": {
    get: operations["OrderController_getOrderPDF"];
  };
  "/v1/tenants/{tenantSlug}/orders/statistics": {
    get: operations["OrderController_getOrderStatistics"];
  };
  "/v1/addresses": {
    get: operations["AddressController_findAll"];
  };
  "/v1/tenants/{tenantSlug}/organizations": {
    /** Get organizations for tenant */
    get: operations["OrganizationController_findAll"];
    /** Create a new organization */
    post: operations["OrganizationController_create"];
  };
  "/v1/tenants/{tenantSlug}/organizations/{id}": {
    /** Get one organization by id */
    get: operations["OrganizationController_findOne"];
    /**
     * Delete an organization
     * @description Only organizations with no donations nor registrations can be deleted.
     */
    delete: operations["OrganizationController_remove"];
    patch: operations["OrganizationController_update"];
  };
  "/v1/tenants/{tenantSlug}/events/{eventId}/registrations": {
    get: operations["RegistrationController_getAllRegistrationsForEvent"];
  };
  "/v1/tenants/{tenantSlug}/events/{eventId}/registrations/total": {
    get: operations["RegistrationController_getRegistrationsTotal"];
  };
  "/v1/tenants/{tenantSlug}/events/{eventId}/registrations/pickups": {
    get: operations["RegistrationController_getAllPickups"];
    post: operations["RegistrationController_createPickup"];
  };
  "/v1/tenants/{tenantSlug}/events/{eventId}/registrations/pickups/{pickupId}/receipt": {
    get: operations["RegistrationController_getPickupReceipt"];
  };
  "/v1/tenants/{tenantSlug}/events/{eventId}/registrations/pickups/{pickupId}": {
    get: operations["RegistrationController_getPickup"];
  };
  "/v1/tenants/{tenantSlug}/events/{eventId}/registrations/{id}": {
    get: operations["RegistrationController_findOne"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SignupDto: {
      lastName: string;
      firstName: string;
      email: string;
      password: string;
    };
    SignupEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      email: string;
      username: string;
      lastName: string;
      firstName: string;
      role: Record<string, never>;
    };
    SigninDto: {
      email: string;
      password: string;
    };
    SigninEntity: {
      firstName: string;
      lastName: string;
      email: string;
      access_token: string;
    };
    UserEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      email: string;
      username: string;
      lastName: string;
      firstName: string;
      role: Record<string, never>;
    };
    UpdateUserDto: {
      firstName?: string;
      lastName?: string;
      email?: string;
      password?: string;
    };
    AddressEntity: {
      id: string;
      number: string | null;
      street: string | null;
      postalCode: string;
      city: string;
      country: string;
      lat?: number | null;
      lon?: number | null;
    };
    AccountClass: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      tenantId: string;
      userId: string;
      createdById: string;
      user?: components["schemas"]["UserEntity"];
    };
    TenantSettingsEntity: {
      ha_clientId?: string;
      ha_clientSecret?: string;
      ha_access_token?: string;
      ha_refresh_token?: string;
      ha_expiry_date?: string;
      ha_organization_slug?: string;
      fr_signatoryFirstName?: string;
      fr_signatoryLastName?: string;
      fr_signatoryFunction?: string;
      fr_signatureImage?: string;
    };
    TenantEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      slug: string;
      description: string;
      SIRET: string | null;
      logo: string | null;
      addressId: string;
      address: components["schemas"]["AddressEntity"];
      accounts?: components["schemas"]["AccountClass"][];
      settings?: components["schemas"]["TenantSettingsEntity"];
    };
    CreateAddressDto: {
      number?: string;
      street?: string;
      postalCode: string;
      city: string;
      country: string;
      lat?: number;
      lon?: number;
    };
    HelloAssoConfigurationType: {
      ha_clientId?: string;
      ha_clientSecret?: string;
      ha_organization_slug?: string;
      ha_refresh_token?: string;
      ha_access_token?: string;
    };
    FiscalReceiptOptionsType: {
      fr_signatoryFirstName: string;
      fr_signatoryLastName: string;
      fr_signatoryFunction: string;
      fr_signatureImage?: Record<string, never>;
    };
    TenantSettingsDto: {
      helloAssoConfiguration?: components["schemas"]["HelloAssoConfigurationType"];
      fiscalReceiptOptions?: components["schemas"]["FiscalReceiptOptionsType"];
    };
    CreateTenantDto: {
      name: string;
      description: string;
      SIRET?: string;
      address: components["schemas"]["CreateAddressDto"];
      settings?: components["schemas"]["TenantSettingsDto"];
      logo?: Record<string, never>;
    };
    UpdateTenantDto: {
      name?: string;
      description?: string;
      SIRET?: string;
      address?: components["schemas"]["CreateAddressDto"];
      settings?: components["schemas"]["TenantSettingsDto"];
      logo?: Record<string, never>;
    };
    SettingsEntity: {
      receiptprint_utility_ip?: string;
      receiptprint_enabled?: string;
      display_lastname_first?: string;
    };
    CreateUserTenantDto: {
      email?: string;
      userId?: string;
      settings?: components["schemas"]["SettingsEntity"];
    };
    UserTenantSettingsEntity: {
      receiptprint_utility_ip?: string;
      receiptprint_enabled?: string;
      display_lastname_first?: string;
    };
    UserTenantEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      tenantId: string;
      userId: string;
      createdById: string;
      user: {
        id?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        email?: string;
        username?: string;
        lastName?: string;
        firstName?: string;
        role?: Record<string, never>;
      };
      settings?: components["schemas"]["UserTenantSettingsEntity"];
    };
    UpdateTenantuserDto: {
      email?: string;
      userId?: string;
      settings?: components["schemas"]["SettingsEntity"];
    };
    CreateEventDto: {
      name: string;
      description?: string;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      address?: components["schemas"]["CreateAddressDto"];
      maxRegistrations?: number;
      isActive?: boolean;
      helloAssoEventSlug?: string;
      helloAssoEventPriceId?: string;
    };
    EventEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      description: string | null;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      isActive: boolean;
      tenantId: string;
      addressId: string | null;
      address?: components["schemas"]["AddressEntity"] | null;
      createdById: string;
      createdBy?: components["schemas"]["UserEntity"];
      helloAssoEventSlug?: string | null;
      helloAssoEventPriceId?: string | null;
      registrationsCount?: number;
      todayRegistrationsCount?: number;
      turnover?: number;
      pickupsCount?: number;
    };
    UpdateEventDto: {
      name?: string;
      description?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      address?: components["schemas"]["CreateAddressDto"];
      maxRegistrations?: number;
      isActive?: boolean;
      helloAssoEventSlug?: string;
      helloAssoEventPriceId?: string;
    };
    CreateMemberDto: {
      firstName: string;
      lastName: string;
      phone?: string;
      email?: string;
      address?: components["schemas"]["CreateAddressDto"];
      note?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    /** @enum {string} */
    "Payment state": "PENDING" | "REFUSED" | "PROCESSED";
    /** @enum {string} */
    "Payment method": "CARD" | "CASH" | "CHECK" | "TRANSFER";
    AddressLight: {
      number?: Record<string, never>;
      street?: Record<string, never>;
      postalCode?: string;
      city: string;
      country: string;
    };
    MemberLight: {
      firstName?: string;
      lastName?: string;
      email?: string | null;
      phone?: Record<string, never>;
      address?: components["schemas"]["AddressLight"] | null;
    };
    /** @enum {string} */
    "Organization type": "ASSOCIATION" | "COMPANY" | "PUBLIC";
    EventPriceEntityLight: {
      id: string;
      label: string;
      amount: number;
      eventId: string;
      bibRanges?: components["schemas"]["BibRangeEntity"][];
      registrationsCount: number;
    };
    MemberEntityLight: {
      id: string;
      firstName: string;
      lastName: string;
      email: string | null;
      phone: string | null;
      addressId: string | null;
      address?: components["schemas"]["AddressEntity"] | null;
    };
    RegistrationEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      orderId?: string;
      raceNumber?: number;
      eventPriceId: string;
      event?: components["schemas"]["EventEntity"];
      eventId: string;
      eventPrice?: components["schemas"]["EventPriceEntityLight"];
      member?: components["schemas"]["MemberEntityLight"];
      memberId: string;
      bibPickupId?: Record<string, never>;
      qrCode?: string;
      order?: components["schemas"]["OrderEntityLight"];
    };
    MemberEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      firstName: string;
      lastName: string;
      email: string | null;
      phone: string | null;
      addressId: string | null;
      address?: components["schemas"]["AddressEntity"] | null;
      tenantId: string;
      createdById: string;
      createdBy?: components["schemas"]["UserEntity"];
      orders?: components["schemas"]["OrderEntityLight"][];
      registrations?: components["schemas"]["RegistrationEntity"][];
    };
    OrganizationEntity: {
      manager?: components["schemas"]["Organization type"];
      id: string;
      label: string;
      SIRET?: string | null;
      address?: components["schemas"]["AddressEntity"] | null;
      member?: components["schemas"]["MemberEntity"];
      type: Record<string, never>;
      email?: string | null;
      phone?: string | null;
    };
    /** @enum {string} */
    "Donation type": "CASH" | "INKIND";
    UserLight: {
      firstName?: string;
      lastName?: string;
      username?: string;
    };
    OrderEntity: {
      paymentState: components["schemas"]["Payment state"];
      paymentMethod: components["schemas"]["Payment method"];
      id: string;
      subId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      createdById: string;
      amount: number;
      currency: string;
      tenantId: string;
      memberId: string | null;
      organizationId: string | null;
      _count: {
        registrations?: number;
        donations?: number;
      };
      member?: components["schemas"]["MemberEntity"] | null;
      organization?: components["schemas"]["OrganizationEntity"] | null;
      registrations?: components["schemas"]["RegistrationEntity"][];
      donations?: components["schemas"]["DonationEntity"][];
      createdBy?: components["schemas"]["UserLight"];
      tenant?: components["schemas"]["TenantEntity"];
    };
    DonationEntity: {
      type: components["schemas"]["Donation type"];
      id: string;
      subId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      amount: number;
      description: string | null;
      fiscalReceipt: boolean;
      createdById: string;
      orderId: string;
      order?: components["schemas"]["OrderEntity"];
    };
    OrderEntityLight: {
      paymentState: components["schemas"]["Payment state"];
      paymentMethod: components["schemas"]["Payment method"];
      id: string;
      subId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      createdById: string;
      amount: number;
      currency: string;
      tenantId: string;
      memberId: string | null;
      organizationId: string | null;
      _count: {
        registrations?: number;
        donations?: number;
      };
      member?: components["schemas"]["MemberLight"] | null;
      organization?: components["schemas"]["OrganizationEntity"] | null;
      registrations?: components["schemas"]["RegistrationEntity"][];
      donations?: components["schemas"]["DonationEntity"][];
      createdBy?: components["schemas"]["UserLight"];
      tenant?: components["schemas"]["TenantEntity"];
    };
    UpdateMemberDto: {
      firstName?: string;
      lastName?: string;
      phone?: string;
      email?: string;
      address?: components["schemas"]["CreateAddressDto"];
      note?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    CreateDonationDto: {
      amount: number;
      description: string;
      type: Record<string, never>;
      fiscalReceipt: boolean;
      orderId: string;
      /** Format: date-time */
      createdAt?: string;
    };
    CreateReceiptDto: {
      donations: string[];
    };
    StatisticsPayer: {
      email?: string;
      address?: string;
      city?: string;
      zipCode?: string;
      country?: string;
      company?: string;
      dateOfBirth?: string;
      firstName?: string;
      lastName?: string;
    };
    StatisticsSharePayment: {
      id?: number;
      shareAmount?: number;
    };
    StatisticsUser: {
      firstName?: string;
      lastName?: string;
    };
    StatisticsItemDiscount: {
      code?: string;
      amount?: number;
    };
    StatisticsItemCustomField: {
      id?: number;
      name?: string;
      type?: Record<string, never>;
      answer?: string;
    };
    StatisticsItemOption: {
      name?: string;
      amount?: number;
      priceCategory?: Record<string, never>;
      isRequired?: boolean;
      customFields?: components["schemas"]["StatisticsItemCustomField"][];
      optionId?: number;
    };
    StatisticsOrderItem: {
      payments?: components["schemas"]["StatisticsSharePayment"][];
      name?: string;
      user?: components["schemas"]["StatisticsUser"];
      priceCategory?: Record<string, never>;
      minAmount?: number;
      discount?: components["schemas"]["StatisticsItemDiscount"];
      customFields?: components["schemas"]["StatisticsItemCustomField"][];
      options?: components["schemas"]["StatisticsItemOption"][];
      ticketUrl?: string;
      qrCode?: string;
      membershipCardUrl?: string;
      dayOfLevy?: number;
      tierDescription?: string;
      tierId?: number;
      comment?: string;
      id?: number;
      amount?: number;
      type?: Record<string, never>;
      initialAmount?: number;
      state?: Record<string, never>;
    };
    StatisticsShareItem: {
      id?: number;
      shareAmount?: number;
      shareItemAmount?: number;
      shareOptionsAmount?: number;
    };
    CommonMetaModel: {
      createdAt?: string;
      updatedAt?: string;
    };
    StatisticsRefundOperationLightModel: {
      id?: number;
      amount?: number;
      amountTip?: number;
      status?: Record<string, never>;
      meta?: components["schemas"]["CommonMetaModel"];
    };
    StatisticsOrderPayment: {
      items?: components["schemas"]["StatisticsShareItem"][];
      cashOutDate?: string;
      cashOutState?: Record<string, never>;
      paymentReceiptUrl?: string;
      fiscalReceiptUrl?: string;
      id?: number;
      amount?: number;
      amountTip?: number;
      date?: string;
      paymentMeans?: Record<string, never>;
      installmentNumber?: number;
      state?: Record<string, never>;
      type?: Record<string, never>;
      meta?: components["schemas"]["CommonMetaModel"];
      paymentOffLineMean?: Record<string, never>;
      refundOperations?: components["schemas"]["StatisticsRefundOperationLightModel"][];
    };
    StatisticOrderAmountModel: {
      total?: number;
      vat?: number;
      discount?: number;
    };
    HelloAssoOrderDetail: {
      payer?: components["schemas"]["StatisticsPayer"];
      items?: components["schemas"]["StatisticsOrderItem"][];
      payments?: components["schemas"]["StatisticsOrderPayment"][];
      amount?: components["schemas"]["StatisticOrderAmountModel"];
      id?: number;
      date?: string;
      formSlug?: string;
      formType?: Record<string, never>;
      organizationName?: string;
      organizationSlug?: string;
      organizationType?: Record<string, never>;
      organizationIsUnderColucheLaw?: boolean;
      checkoutIntentId?: number;
      meta?: components["schemas"]["CommonMetaModel"];
    };
    HelloAssoEventOrderDto: {
      eventType: string;
      data: components["schemas"]["HelloAssoOrderDetail"];
    };
    HelloAssoNotificationUrl: {
      url: string;
    };
    BibRangeDto: {
      id?: string;
      start: number;
      end: number;
    };
    CreateEventPriceDto: {
      id?: string;
      label: string;
      amount: number;
      maxRegistrations?: number;
      bibRanges?: components["schemas"]["BibRangeDto"][];
    };
    BibRangeEntity: {
      id: string;
      start: number;
      end: number;
    };
    EventPriceEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      label: string;
      amount: number;
      eventId: string;
      bibRanges?: components["schemas"]["BibRangeEntity"][];
      registrationsCount?: number;
    };
    UpdateEventpriceDto: {
      id?: string;
      label?: string;
      amount?: number;
      maxRegistrations?: number;
      bibRanges?: components["schemas"]["BibRangeDto"][];
    };
    DonationDto: {
      amount: number;
      fiscalReceipt: boolean;
    };
    RegistrationsDto: {
      eventId: string;
      eventPriceId: string;
      memberId: string;
      qrCode?: string;
      raceNumber?: number;
      orderId?: string;
    };
    CreateOrderDto: {
      paymentMethod: components["schemas"]["Payment method"];
      paymentState: components["schemas"]["Payment state"];
      payer: string;
      donations?: components["schemas"]["DonationDto"][];
      registrations?: components["schemas"]["RegistrationsDto"][];
      currency: string;
      /** Format: date-time */
      createdAt?: string;
    };
    UpdateDonationDto: {
      id?: string;
      amount: number;
      fiscalReceipt: boolean;
    };
    UpdateRegistrationDto: {
      id?: string;
      eventId?: string;
      eventPriceId?: string;
      memberId?: string;
      qrCode?: string;
      raceNumber?: number;
    };
    UpdateOrderDto: {
      paymentMethod?: components["schemas"]["Payment method"];
      paymentState?: components["schemas"]["Payment state"];
      payer?: string;
      currency?: string;
      donations?: components["schemas"]["UpdateDonationDto"][];
      registrations?: components["schemas"]["UpdateRegistrationDto"][];
    };
    TimeStatistics: {
      date: string;
      count: number;
    };
    OrderStatisticsEntity: {
      ordersCount: number;
      donationsCount: number;
      turnover: number | null;
      progress?: components["schemas"]["TimeStatistics"][];
    };
    CreateOrganizationDto: {
      type?: components["schemas"]["Organization type"];
      label: string;
      SIRET?: string;
      address?: components["schemas"]["CreateAddressDto"];
      managerId?: string;
      phone?: string;
      email?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    UpdateOrganizationDto: {
      type?: components["schemas"]["Organization type"];
      label?: string;
      SIRET?: string;
      address?: components["schemas"]["CreateAddressDto"];
      managerId?: string;
      phone?: string;
      email?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    CreatePickupDto: {
      registrations: string[];
    };
    Member: {
      lastName: string;
      firstName: string;
      address?: components["schemas"]["AddressEntity"] | null;
    };
    EventPrice: {
      label: string;
      amount: number;
    };
    Order: {
      id: string;
      subId: number;
    };
    Registration: {
      member: components["schemas"]["Member"];
      raceNumber: number;
      eventPrice?: components["schemas"]["EventPrice"];
      order?: components["schemas"]["Order"];
    };
    PickupEntity: {
      id: string;
      subId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      eventId: string;
      registrations: components["schemas"]["Registration"][];
      createdBy?: components["schemas"]["UserEntity"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Register to Inscriptor */
  AuthController_signup: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignupDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignupEntity"];
        };
      };
    };
  };
  AuthController_signin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SigninDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SigninEntity"];
        };
      };
    };
  };
  AuthController_validateToken: {
    parameters: {
      path: {
        token: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SigninEntity"];
        };
      };
    };
  };
  AuthController_googleAuthCallback: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /**
   * Get ALL users
   * @description Only SUPERADMIN can access this endpoint
   */
  UserController_findAll: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"][];
        };
      };
    };
  };
  /**
   * Get user by ID
   * @description SUPERADMIN can access every user, user can only see itself
   */
  UserController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  /**
   * Delete user by ID
   * @description SUPERADMIN only can delete a user
   */
  UserController_remove: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /**
   * Update user by ID
   * @description SUPERADMIN can update every user, user can only update itself
   */
  UserController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  /**
   * Get tenants for active user
   * @description SUPERADMIN can see every tenant, current user will only see those which he's connected to
   */
  TenantController_findAll: {
    parameters: {
      query?: {
        /** @description Include user accounts */
        displayUsers?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TenantEntity"][];
        };
      };
    };
  };
  /**
   * Create a new tenant
   * @description Only ADMINs can create a new tenant
   */
  TenantController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTenantDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TenantEntity"];
        };
      };
    };
  };
  /**
   * Get a tenant
   * @description Users can only see the tenants they're connected to
   */
  TenantController_findOne: {
    parameters: {
      query?: {
        /** @description Include user accounts */
        displayUsers?: boolean;
      };
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TenantEntity"];
        };
      };
    };
  };
  /**
   * Update a tenant
   * @description Only ADMINs can update a tenant
   */
  TenantController_update: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Get all accounts related to tenant */
  UserTenantController_getUsers: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserTenantEntity"][];
        };
      };
    };
  };
  /** Add a user to tenant */
  UserTenantController_create: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserTenantDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserTenantEntity"];
        };
      };
    };
  };
  /** Get account related to tenant */
  UserTenantController_getAccountForUser: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserTenantEntity"];
        };
      };
    };
  };
  /** Get account related to tenant */
  UserTenantController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserTenantEntity"];
        };
      };
    };
  };
  /** Delete account from tenant */
  UserTenantController_removeAccountFromTenant: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Update account from tenant */
  UserTenantController_updateAccount: {
    parameters: {
      path: {
        tenantSlug: string;
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantuserDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserTenantEntity"];
        };
      };
    };
  };
  /** Get all events */
  EventController_findAll: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventEntity"][];
        };
      };
    };
  };
  /** Create a new event */
  EventController_createEvent: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEventDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EventEntity"];
        };
      };
    };
  };
  /** Get one event */
  EventController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventEntity"];
        };
      };
    };
  };
  /** Update an event */
  EventController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEventDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventEntity"];
        };
      };
    };
  };
  /** Get all members */
  MemberController_getMembersForTenant: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MemberEntity"][];
        };
      };
    };
  };
  /** Create a new member */
  MemberController_createMember: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMemberDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MemberEntity"];
        };
      };
    };
  };
  /** Get a member by ID */
  MemberController_getOneMember: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MemberEntity"];
        };
      };
    };
  };
  /**
   * Delete a member
   * @description Only members with no donations nor registrations can be deleted.
   */
  MemberController_remove: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Update  a member */
  MemberController_update: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMemberDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MemberEntity"];
        };
      };
    };
  };
  /** Get 5 last created members */
  MemberController_getLastCreatedMembers: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MemberEntity"][];
        };
      };
    };
  };
  /** Get all donations */
  DonationController_findAll: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DonationEntity"][];
        };
      };
    };
  };
  /** Create a donation */
  DonationController_create: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDonationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DonationEntity"];
        };
      };
    };
  };
  /** Generate fiscal receipts for donations */
  DonationController_generateReceipt: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReceiptDto"];
      };
    };
    responses: {
      /** @description The generated PDF receipt */
      201: {
        headers: {
          /** @description Filename of the generated PDF */
          "X-Filename"?: string;
        };
        content: {
          "application/pdf": string;
        };
      };
    };
  };
  /** Get all donations for a single member */
  DonationController_findOne: {
    parameters: {
      path: {
        tenantSlug: string;
        memberId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DonationEntity"][];
        };
      };
    };
  };
  /** Get orders count */
  HelloassoController_getProcessedOrdersCount: {
    parameters: {
      path: {
        tenantSlug: string;
        eventId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /** HelloAsso notification URL */
  HelloassoController_newOrder: {
    parameters: {
      path: {
        tenantSlug: string;
        helloAssoClientId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HelloAssoEventOrderDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  /** Get HelloAsso notification URL */
  HelloassoController_getNotificationUrl: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["HelloAssoNotificationUrl"];
        };
      };
    };
  };
  /** Create multiple orders */
  HelloassoController_createMultipleOrders: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HelloAssoOrderDetail"][];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrderEntity"][];
        };
      };
    };
  };
  EventpriceController_getEventPricesForEvent: {
    parameters: {
      path: {
        tenantSlug: string;
        eventId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventPriceEntityLight"][];
        };
      };
    };
  };
  EventpriceController_createEventPrice: {
    parameters: {
      path: {
        tenantSlug: string;
        eventId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEventPriceDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EventPriceEntity"];
        };
      };
    };
  };
  EventpriceController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventPriceEntity"];
        };
      };
    };
  };
  EventpriceController_remove: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  EventpriceController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEventpriceDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  EventpriceController_getFreeSlotsEventPrice: {
    parameters: {
      path: {
        eventId: string;
        eventPriceId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number[];
        };
      };
    };
  };
  OrderController_getAllOrders: {
    parameters: {
      query: {
        withDetails: boolean;
        createdBy?: string;
      };
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderEntityLight"][];
        };
      };
    };
  };
  OrderController_createOrder: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrderDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrderEntity"];
        };
      };
    };
  };
  OrderController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderEntity"];
        };
      };
    };
  };
  OrderController_remove: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  OrderController_update: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrderDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderEntity"];
        };
      };
    };
  };
  OrderController_getOrderPDF: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  OrderController_getOrderStatistics: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderStatisticsEntity"];
        };
      };
    };
  };
  AddressController_findAll: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Get organizations for tenant */
  OrganizationController_findAll: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationEntity"][];
        };
      };
    };
  };
  /** Create a new organization */
  OrganizationController_create: {
    parameters: {
      path: {
        tenantSlug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrganizationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationEntity"];
        };
      };
    };
  };
  /** Get one organization by id */
  OrganizationController_findOne: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationEntity"];
        };
      };
    };
  };
  /**
   * Delete an organization
   * @description Only organizations with no donations nor registrations can be deleted.
   */
  OrganizationController_remove: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  OrganizationController_update: {
    parameters: {
      path: {
        tenantSlug: string;
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrganizationDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationEntity"];
        };
      };
    };
  };
  RegistrationController_getAllRegistrationsForEvent: {
    parameters: {
      query?: {
        limit?: number;
      };
      path: {
        eventId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RegistrationEntity"][];
        };
      };
    };
  };
  RegistrationController_getRegistrationsTotal: {
    parameters: {
      path: {
        eventId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  RegistrationController_getAllPickups: {
    parameters: {
      query: {
        limit: number;
      };
      path: {
        tenantSlug: string;
        eventId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PickupEntity"][];
        };
      };
    };
  };
  RegistrationController_createPickup: {
    parameters: {
      path: {
        tenantSlug: string;
        eventId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePickupDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PickupEntity"];
        };
      };
    };
  };
  RegistrationController_getPickupReceipt: {
    parameters: {
      header?: {
        /** @description text/html */
        "Content-Type"?: string;
      };
      path: {
        tenantSlug: string;
        eventId: string;
        pickupId: string;
      };
    };
    responses: {
      /** @description HTML content of the pickup receipt */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  RegistrationController_getPickup: {
    parameters: {
      path: {
        tenantSlug: string;
        eventId: string;
        pickupId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PickupEntity"];
        };
      };
    };
  };
  RegistrationController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RegistrationEntity"];
        };
      };
    };
  };
}
